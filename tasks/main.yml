---
- name: System preparation | Set hostname 
  ansible.builtin.hostname:
    name: 'hostname'

- name: System preparation | Install chrony and wget]
  dnf: 
    name: 
      - chrony
      - wget
    state: latest

- name: System preparation | Set timezone
  community.general.timezone:
    name: '{{ timezone }}'
  notify:
    - Started and Enabled chronyd

- name: Security Settings | Configure rule firewealld
  firewalld: 
    port: '{{ item }}'
    permanent: yes 
    state: enabled 
  loop: 
    - 995/tcp
    - 993/tcp
    - 587/tcp
    - 465/tcp
    - 443/tcp
    - 143/tcp
    - 110/tcp
    - 80/tcp
    - 25/tcp
  notify: 
    - Restarted Firewalld

- name: Security Settings | Disable SELinux 
  ansible.posix.selinux:
    state: disabled

- name: Security Settings | Disable SELinux now
  command: 
    cmd: setenforce 0 
  when: 
    - ansible_selinux.status == "enabled"

- name: Configuring the Web Server | Install nginx
  dnf: 
    name: nginx 
    state: latest 
  
- name: Configuring the Web Server | Started and Enabled nginx 
  service: 
    name: nginx 
    enabled: true 
    state: started

- name: Configuring the Web Server | Install epel-release
  dnf: 
    name: epel-release
    state: latest 

- name: Configuring the Web Server | Install remi-reliase
  command:
    cmd: dnf install -y http://rpms.remirepo.net/enterprise/remi-release-8.rpm

- name: Configuring the Web Server | Installing PHP from the REMI repository
  dnf: 
    name: '@php:remi-7.2'
    state: present

- name: Configuring the Web Server | Install php-fpm
  dnf: 
    name: php-fpm
    state: latest

- name: Configuring the Web Server | Setting nginx.conf for working php
  copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
  notify:
    - Started and Enabled php-fpm
    - Restarted nginx

- name: Configuring the Web Server | Install MariaDB
  dnf:
    name: 
      - mariadb-server 
      - mariadb
      - python3-PyMySQL
    state: latest

- name: Configuring the Web Server | Started and Enabled MariaDB 
  service: 
    name: mariadb 
    state: started 
    enabled: true

- name: Configuring the Web Server | Configure root password MariaDB
  mysql_user:
    check_implicit_admin: true
    login_user: root 
    login_password: "{{ mariadb_root_password }}"
    user: root 
    password: "{{ mariadb_root_password }}"
    host: localhost

- name: Installing and configuring PostfixAdmin | Installing additional components for PHP
  dnf: 
    name: 
      - php-mysqli 
      - php-mbstring 
      - php-imap
    state: latest
  notify: 
    - Restarted php-fpm

- name: Installing and configuring PostfixAdmin | Download PostifAdmin
  get_url:
    url: https://sourceforge.net/projects/postfixadmin/files/latest/download
    dest: '{{ path_download_postfixadmin }}/postfixadmin.tar.gz'

- name: Installing and configuring PostfixAdmin | Creating a directory for postfixadmin
  file: 
    path: '{{ dir_postfixadmin }}'
    state: directory

#- name: Installing and configuring PostfixAdmin | Unpacking archive PostfixAdmin
#  unarchive:
#    src: '{{ path_download_postfixadmin }}/postfixadmin.tar.gz'
#    dest: '{{ dir_postfixadmin }}'
#    remote_src: true

- name: Installing and configuring PostfixAdmin | Unpacking archive PostfixAdmin
  command: 
    cmd: tar -C /usr/share/nginx/html/postfixadmin -xvf postfixadmin.tar.gz --strip-components 1
    chdir: '{{ path_download_postfixadmin }}'
    creates: '{{ dir_postfixadmin }}/templates_c'

- name: Installing and configuring PostfixAdmin | Creating the "templates_c" directory
  file: 
    path: '{{ dir_postfixadmin }}/templates_c'
    state: directory

- name: Installing and configuring PostfixAdmin | Setting the rights to the directory
  file: 
    path: '{{ dir_postfixadmin }}'
    state: directory
    recurse: yes
    owner: apache
    group: apache

- name: Installing and configuring PostfixAdmin | Creating a postfix database
  community.mysql.mysql_db:
    name: "{{ potsfixadmin_database_name }}"
    encoding: utf8
    collation: utf8_bin
    login_user: root
    login_password: "{{ mariadb_root_password }}"
  failed_when: false 

- name: Installing and configuring PostfixAdmin | Create username database for postfixadmin
  community.mysql.mysql_user:
    name: "{{ postfixadmin_database_username }}"
    password: "{{ postfixadmin_database_username_password }}"
    priv: '*.*:ALL,GRANT'
    host: '%'
    state: present
    login_user: root
    login_password: "{{ mariadb_root_password }}"

- name: Installing and configuring PostfixAdmin | Creating a postfixadmin configuration file
  template: 
    src: config.local.php.j2
    dest: '{{ dir_postfixadmin }}/config.local.php'